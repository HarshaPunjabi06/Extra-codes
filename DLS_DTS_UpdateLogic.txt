
        /*
        Code to update DLS and DTS -- added on 22nd July 2019
         */

        config.set(TableInputFormat.INPUT_TABLE,PL_tableName_AWBNO)

        val hBasePL = sc.newAPIHadoopRDD(config, classOf[TableInputFormat], classOf[ImmutableBytesWritable], classOf[Result])
        val df_hbasepl = hBasePL.map(x => {
          (
            Bytes.toString(x._2.getRow),
            Bytes.toString(x._2.getValue(Bytes.toBytes("PDJ"), Bytes.toBytes("CT_COL"))),
            Bytes.toString(x._2.getValue(Bytes.toBytes("ABM"), Bytes.toBytes("CT_COL"))),
            Bytes.toString(x._2.getValue(Bytes.toBytes("SLT"), Bytes.toBytes("CT_COL"))),
            Bytes.toString(x._2.getValue(Bytes.toBytes("DLS"), Bytes.toBytes("CT_COL"))),
            Bytes.toString(x._2.getValue(Bytes.toBytes("DTS"), Bytes.toBytes("CT_COL")))
          )
        }).toDF().withColumnRenamed("_1", "PK").withColumnRenamed("_2", "PDJ").withColumnRenamed("_3", "ABM").withColumnRenamed("_4", "SLT").withColumnRenamed("_5", "DLS").withColumnRenamed("_6", "DTS")

        df_hbasepl.registerTempTable("plhbase")
        var dls_DF1:DataFrame = null;
        var delivery_date2:DataFrame = null;

        dls_DF1 = sqlContext.sql(s"""Select PK, NVL(CASE WHEN (ABM = "NA!@#" or ABM is null) AND (SLT = "NA!@#" or SLT is null) AND (PDJ = "NA!@#" or PDJ IS NULL) THEN 'I' ELSE CASE WHEN (ABM = "NA!@#" or ABM is null) AND (SLT = "NA!@#" or SLT is null) AND (PDJ != "NA!@#" or PDJ is NOT NULL) THEN CASE WHEN (instr(PDJ,'S015') <= 0 AND instr(PDJ,'S018') <= 0 ) THEN 'I' ELSE CASE WHEN (instr(PDJ,'S015') > 0 OR instr(PDJ,'S018') > 0 ) AND (DATEDIFF(CURRENT_DATE(), CAST(substr(PDJ, instr(PDJ, '~S015~') - 19, 16) AS  DATE)) > 45 OR DATEDIFF(CURRENT_DATE(), CAST(substr(PDJ, instr(PDJ, '~S018~') - 19, 16) AS DATE)) > 45) THEN 'I' ELSE 'UD' END END ELSE
CASE WHEN (ABM != "NA!@#" or ABM is NOT NULL OR SLT != "NA!@#" or SLT is NOT NULL) AND (PDJ = "NA!@#" or PDJ IS NULL) THEN 'NA!@#' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T123~') > 0 THEN substr(PDJ,instr(PDJ, '~T123~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T016~') > 0 THEN substr(PDJ,instr(PDJ, '~T016~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T026~') > 0 THEN substr(PDJ,instr(PDJ, '~T026~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T132~') > 0 THEN substr(PDJ,instr(PDJ, '~T132~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T074~') > 0 THEN substr(PDJ,instr(PDJ, '~T074~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T000~') > 0 THEN substr(PDJ,instr(PDJ, '~T000~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T135~') > 0 THEN substr(PDJ,instr(PDJ, '~T135~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T141~') > 0 THEN substr(PDJ,instr(PDJ, '~T141~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T021~') > 0 THEN substr(PDJ,instr(PDJ, '~T021~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T025~') > 0 THEN substr(PDJ,instr(PDJ, '~T025~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T099~') > 0 THEN substr(PDJ,instr(PDJ, '~T099~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T105~') > 0 THEN substr(PDJ,instr(PDJ, '~T105~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T070~') > 0 THEN substr(PDJ,instr(PDJ, '~T070~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T090~') > 0 THEN substr(PDJ,instr(PDJ, '~T090~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T098~') > 0 THEN substr(PDJ,instr(PDJ, '~T098~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T188~') > 0 THEN substr(PDJ,instr(PDJ, '~T188~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T178~') > 0 THEN substr(PDJ,instr(PDJ, '~T178~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T284~') > 0 THEN substr(PDJ,instr(PDJ, '~T284~')+1,4) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T123~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T016~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T026~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T132~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T074~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T000~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T135~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T141~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T021~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T025~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T099~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T105~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T070~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T090~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T098~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T188~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T178~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T284~') <=0 AND (DLS IS NULL OR SUBSTR(DLS,1,3) NOT IN ($closure_codes) OR DLS = 'I' OR DLS = 'NA!@#') THEN 'UD' ELSE
DLS END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END END ,'NA!@#') as CT_COL from plhbase""")

        delivery_date2 = sqlContext.sql(s"""Select PK, NVL(CASE WHEN (ABM = "NA!@#" or ABM is null) AND (SLT = "NA!@#" or SLT is null) AND (PDJ = "NA!@#" or PDJ IS NULL) THEN from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm') ELSE
CASE WHEN (ABM = "NA!@#" or ABM is null) AND (SLT = "NA!@#" or SLT is null) AND (PDJ != "NA!@#" or PDJ is NOT NULL) THEN
CASE WHEN (instr(PDJ,'S015') <= 0 AND instr(PDJ,'S018') <=0 ) THEN from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm') ELSE
CASE WHEN (instr(PDJ,'S015') > 0 OR instr(PDJ,'S018') > 0 ) AND (DATEDIFF(CURRENT_DATE(), CAST(substr(PDJ, instr(PDJ, '~S015~') - 19, 10) AS  DATE)) > 45 OR DATEDIFF(CURRENT_DATE(), CAST(substr(PDJ, instr(PDJ, '~S018~') - 19, 10) AS DATE)) > 45) THEN from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm') ELSE
CASE WHEN locate("|",reverse(PDJ)) >0 THEN substr(PDJ,length(PDJ) - locate("|",reverse(PDJ))+2,16) ELSE  substr(PDJ,0,16) END END END ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T123~') > 0 THEN substr(PDJ,instr(PDJ, '~T123~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T016~') > 0 THEN substr(PDJ,instr(PDJ, '~T016~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T026~') > 0 THEN substr(PDJ,instr(PDJ, '~T026~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T132~') > 0 THEN substr(PDJ,instr(PDJ, '~T132~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T074~') > 0 THEN substr(PDJ,instr(PDJ, '~T074~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T000~') > 0 THEN substr(PDJ,instr(PDJ, '~T000~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T135~') > 0 THEN substr(PDJ,instr(PDJ, '~T135~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T141~') > 0 THEN substr(PDJ,instr(PDJ, '~T141~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T021~') > 0 THEN substr(PDJ,instr(PDJ, '~T021~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T025~') > 0 THEN substr(PDJ,instr(PDJ, '~T025~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T099~') > 0 THEN substr(PDJ,instr(PDJ, '~T099~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T105~') > 0 THEN substr(PDJ,instr(PDJ, '~T105~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T070~') > 0 THEN substr(PDJ,instr(PDJ, '~T070~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T090~') > 0 THEN substr(PDJ,instr(PDJ, '~T090~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T098~') > 0 THEN substr(PDJ,instr(PDJ, '~T098~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T188~') > 0 THEN substr(PDJ,instr(PDJ, '~T188~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T178~') > 0 THEN substr(PDJ,instr(PDJ, '~T178~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND instr(PDJ, '~T284~') > 0 THEN substr(PDJ,instr(PDJ, '~T284~')-19,16) ELSE
CASE WHEN ((ABM != "NA!@#" or ABM is NOT NULL) OR (SLT != "NA!@#" or SLT is NOT NULL)) AND (PDJ != "NA!@#" or PDJ is NOT NULL) THEN CASE WHEN locate("|",reverse(PDJ)) >0 THEN substr(PDJ,length(PDJ) - locate("|",reverse(PDJ))+2,16) ELSE substr(PDJ,0,16) END  ELSE
DTS END END END END END END END END END END END END END END END END END END END END END ,'NA!@#') as CT_COL from plhbase""")

        if(dls_DF1== null){
          println("dls_DF1 is null, creating empty dataframe")
          dls_DF1 = sqlContext.createDataFrame(sc.emptyRDD[Row], HbaseSchema)
        }
        if(delivery_date2== null){
          println("delivery_date2 is null, creating empty dataframe")
          delivery_date2 = sqlContext.createDataFrame(sc.emptyRDD[Row], HbaseSchema)
        }

        val pl_map_dlv = Map("DLS" -> dls_DF1,"DTS" -> delivery_date2)

        //val PL_DLS_TEST = "CTDEV.TEST_DLS_DTS"

        println("PL Table dump start::::: " + sdf.format(new Date()))

        pl_map_dlv.foreach { a: (String, DataFrame) =>
          val key = a._1
          val value = a._2

          println(s"key: $key ")

          def PL_catalog = s"""{
                              |"table":{"namespace":"default", "name":"${PL_tableName_AWBNO}"},
                              |"rowkey":"PK",
                              |"columns":{
                              |"PK":{"cf":"rowkey", "col":"PK", "type":"string"},
                              |"CT_COL":{"cf":"${key}", "col":"CT_COL", "type":"string"}
                              |}
                              |}""".stripMargin

          println("catalog created :::: " + PL_catalog)

          println(sdf.format(new Date()))

          value.write.options(Map(HBaseTableCatalog.tableCatalog -> PL_catalog, HBaseTableCatalog.newTable -> "5")).format("org.apache.spark.sql.execution.datasources.hbase").save()

          println("catalog " + key + " written to hbase table:::: " + sdf.format(new Date()))

        }